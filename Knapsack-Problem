{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-30T00:22:37.381658Z","iopub.execute_input":"2024-09-30T00:22:37.383108Z","iopub.status.idle":"2024-09-30T00:22:37.390550Z","shell.execute_reply.started":"2024-09-30T00:22:37.383040Z","shell.execute_reply":"2024-09-30T00:22:37.389370Z"},"trusted":true},"execution_count":182,"outputs":[]},{"cell_type":"code","source":"# knapsack problem\n# items: water bottle, snack, laptop, camera, rain jacket\n# weight is measured in pounds, volume is square inches, value is on a scale from 1 to 10 of importance for a given situation\n\nclass item:\n    def __init__(self, name, weight, volume, value):\n        self.name = name\n        self.weight = weight\n        self.volume = volume\n        self.value = value\n        \nclass phenotype:\n    def __init__(self,items,weight,volume,value):\n        self.items = items\n        self.weight = weight\n        self.volume = volume\n        self.value = value","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:37.498206Z","iopub.execute_input":"2024-09-30T00:22:37.499441Z","iopub.status.idle":"2024-09-30T00:22:37.506574Z","shell.execute_reply.started":"2024-09-30T00:22:37.499389Z","shell.execute_reply":"2024-09-30T00:22:37.505338Z"},"trusted":true},"execution_count":183,"outputs":[]},{"cell_type":"code","source":"water_bottle = item(\"water bottle\",2,4,9)\nsnack = item(\"snack\",2,3,7)\nlaptop = item(\"laptop\",4,3,3)\ncamera = item(\"camera\",2,2,7)\nrain_jacket = item(\"rain jacket\",1,1,3)\nitem_list = [water_bottle,snack,laptop,camera,rain_jacket]","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:37.638667Z","iopub.execute_input":"2024-09-30T00:22:37.639106Z","iopub.status.idle":"2024-09-30T00:22:37.648239Z","shell.execute_reply.started":"2024-09-30T00:22:37.639065Z","shell.execute_reply":"2024-09-30T00:22:37.646362Z"},"trusted":true},"execution_count":184,"outputs":[]},{"cell_type":"code","source":"# since there are 5 items, each individual's chromosome will be a binary of length 5\n\ndef random_chromosome(chrom_shape):\n    chromosome = np.random.randint(0,2,chrom_shape)\n    return chromosome\n\ndef chromosome_phenotype(chromosome,chrom_shape):\n    chrom_items = []\n    chrom_weight = []\n    chrom_volume = []\n    chrom_value = []\n    for i in range(chrom_shape[0]):\n        if chromosome[i] == 1:\n            chrom_items.append(item_list[i].name)\n            chrom_weight.append(item_list[i].weight)\n            chrom_volume.append(item_list[i].volume)\n            chrom_value.append(item_list[i].value)\n    chrom_pheno = phenotype(chrom_items,np.sum(chrom_weight),\n                           np.sum(chrom_volume),np.sum(chrom_value))\n    return chrom_pheno\n\ndef valid_solution(phenotype, max_weight, max_volume):\n    valid = True\n    if phenotype.weight > max_weight:\n        valid = False\n    if phenotype.volume > max_volume:\n        valid = False\n    return valid\n\ndef select_chromosome(population,chrom_shape):\n    chromosome = np.empty(chrom_shape)\n    chromosome[:,0] = population[:,np.random.randint(0,population.shape[1])]\n    return chromosome\n\ndef init_population(pop_size,chrom_shape,max_weight,max_volume):\n    population = np.empty(pop_size)\n    i = 0\n    while i < pop_size[1]:\n        chromosome = random_chromosome(chrom_shape)\n        phenotype = chromosome_phenotype(chromosome,chrom_shape)\n        valid = valid_solution(phenotype,max_weight,max_volume)\n        if valid == True:\n            population[:,i] = chromosome[:,0]\n            i = i+1\n    return population\n\ndef tournament_selection(population,chrom_shape):\n    chrom_1 = select_chromosome(population,chrom_shape)\n    phenotype_1 = chromosome_phenotype(chrom_1,chrom_shape)\n    chrom_2 = select_chromosome(population,chrom_shape)\n    phenotype_2 = chromosome_phenotype(chrom_2,chrom_shape)\n    if phenotype_1.value > phenotype_2.value:\n        winner = chrom_1\n    if phenotype_1.value < phenotype_2.value:\n        winner = chrom_2\n    if phenotype_1.value == phenotype_2.value:\n        rand_choice = np.random.randint(0,2)\n        if rand_choice == 0:\n            winner = chrom_1\n        else:\n            winner = chrom_2\n    return winner \n\ndef crossover(p1, p2):\n    cross_point = np.random.randint(0,len(p1))\n    split1 = p1[0:cross_point]\n    split2 = p1[cross_point:len(p1)]\n    child = np.concatenate((split1,split2),axis=0)\n    return child\n    \ndef mutation(chromosome):\n    mut_index_1 = np.random.randint(0,len(chromosome))\n    mut_index_2 = np.random.randint(0,len(chromosome))\n    a = chromosome[mut_index_1,0]\n    chromosome[mut_index_1,0] = chromosome[mut_index_2,0]\n    chromosome[mut_index_2] = a\n    return chromosome\n\ndef next_generation(population,mut_rate,pop_size,max_weight,max_volume,chrom_shape):\n    \n    new_gen = np.empty(pop_size)\n    j = 0\n    while j < pop_size[1]:\n        parent_1 = tournament_selection(population,chrom_shape)\n        parent_2 = tournament_selection(population,chrom_shape)\n        child = crossover(parent_1,parent_2)\n        child_phenotype = chromosome_phenotype(child,chrom_shape)\n        if np.random.random() < mut_rate:\n            child = mutation(child)\n        \n        if valid_solution(child_phenotype,max_weight,max_volume) == True:\n            new_gen[:,j] = child[:,0]\n            j = j +1\n    \n    return new_gen\n\ndef get_best_solution(population,pop_size,chrom_shape):\n    best_solution = chromosome_phenotype(population[:,0],chrom_shape)\n    for k in range(1,pop_size[1]):\n        next_solution = chromosome_phenotype(population[:,k],chrom_shape)\n        if next_solution.value > best_solution.value:\n            best_solution = next_solution\n    return best_solution\n            \ndef genetic_algorithm(pop_size,chrom_shape,num_gens,mut_rate,max_weight,max_volume):\n    pop = init_population(pop_size,chrom_shape,max_weight,max_volume)\n    best_solution = get_best_solution(pop,pop_size,chrom_shape)\n    print(\"generation: 1\")\n    print(\"best solution: \",best_solution.items)\n    print(\"value: \",best_solution.value)\n    for l in range(num_gens):\n        current_pop = next_generation(pop,mut_rate,pop_size,max_weight,max_volume,chrom_shape)\n        best_solution = get_best_solution(current_pop,pop_size,chrom_shape)\n        print(\"generation: \",l+2)\n        print(\"best solution: \",best_solution.items)\n        print(\"value: \",best_solution.value)\n    return best_solution\n        \n        ","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:37.683660Z","iopub.execute_input":"2024-09-30T00:22:37.684919Z","iopub.status.idle":"2024-09-30T00:22:37.713273Z","shell.execute_reply.started":"2024-09-30T00:22:37.684860Z","shell.execute_reply":"2024-09-30T00:22:37.712024Z"},"trusted":true},"execution_count":185,"outputs":[]},{"cell_type":"code","source":"max_weight = 10\nmax_volume = 10\nchrom_shape = (5,1)\npop_size = (5,20)\nmut_rate = 0.2\nnum_gens = 100","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:37.758413Z","iopub.execute_input":"2024-09-30T00:22:37.758837Z","iopub.status.idle":"2024-09-30T00:22:37.765636Z","shell.execute_reply.started":"2024-09-30T00:22:37.758797Z","shell.execute_reply":"2024-09-30T00:22:37.764273Z"},"trusted":true},"execution_count":186,"outputs":[]},{"cell_type":"code","source":"best_solution = genetic_algorithm(pop_size,chrom_shape,num_gens,mut_rate,max_weight,max_volume)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:37.787400Z","iopub.execute_input":"2024-09-30T00:22:37.787841Z","iopub.status.idle":"2024-09-30T00:22:38.581637Z","shell.execute_reply.started":"2024-09-30T00:22:37.787799Z","shell.execute_reply":"2024-09-30T00:22:38.580313Z"},"trusted":true},"execution_count":187,"outputs":[{"name":"stdout","text":"generation: 1\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  2\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  3\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  4\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  5\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  6\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  7\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  8\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  9\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  10\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  11\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  12\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  13\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  14\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  15\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  16\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  17\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  18\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  19\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  20\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  21\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  22\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  23\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  24\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  25\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  26\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  27\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  28\nbest solution:  ['water bottle', 'snack', 'laptop', 'camera']\nvalue:  26\ngeneration:  29\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  30\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  31\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  32\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  33\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  34\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  35\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  36\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  37\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  38\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  39\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  40\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  41\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  42\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  43\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  44\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  45\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  46\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  47\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  48\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  49\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  50\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  51\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  52\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  53\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  54\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  55\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  56\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  57\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  58\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  59\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  60\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  61\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  62\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  63\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  64\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  65\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  66\nbest solution:  ['water bottle', 'snack', 'laptop', 'camera']\nvalue:  26\ngeneration:  67\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  68\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  69\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  70\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  71\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  72\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  73\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  74\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  75\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  76\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  77\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  78\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  79\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  80\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  81\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  82\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  83\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  84\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  85\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  86\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  87\nbest solution:  ['water bottle', 'snack', 'camera', 'rain jacket']\nvalue:  26\ngeneration:  88\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  89\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  90\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  91\nbest solution:  ['water bottle', 'snack', 'camera', 'rain jacket']\nvalue:  26\ngeneration:  92\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  93\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  94\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  95\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  96\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  97\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  98\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  99\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  100\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\ngeneration:  101\nbest solution:  ['water bottle', 'snack', 'camera']\nvalue:  23\n","output_type":"stream"}]},{"cell_type":"code","source":"print(best_solution.weight)\nprint(best_solution.volume)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T00:22:38.583808Z","iopub.execute_input":"2024-09-30T00:22:38.584225Z","iopub.status.idle":"2024-09-30T00:22:38.590195Z","shell.execute_reply.started":"2024-09-30T00:22:38.584184Z","shell.execute_reply":"2024-09-30T00:22:38.588939Z"},"trusted":true},"execution_count":188,"outputs":[{"name":"stdout","text":"6\n9\n","output_type":"stream"}]}]}